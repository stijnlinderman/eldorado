/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eldorado.api;

import jakarta.servlet.http.*;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.*;

import eldorado.domain.*;
import eldorado.api.dto.*;

@Path("/movepawn")
public class MovePawn {
    @POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response initialize(
			@Context HttpServletRequest request,
			MovePawnRequestDTO requestDTO) {
    	try {
    		HttpSession session = request.getSession(true);
    		Game game = (Game) session.getAttribute("game");
    		
    		int pawnId = requestDTO.pawnId;
    		int newX = requestDTO.x;
    		int newY = requestDTO.y;
    		int newZ = requestDTO.z;
    		String[] selectedCards = requestDTO.selectedCards;
    		
    		Field pawnCurrentField = game.getMap().findNeighboringFieldThatCurrentlyContainsPawn(newX, newY, newZ, pawnId);
    		Field pawnFieldToMoveTo = game.getMap().getField(newX, newY, newZ);
    		
    		if (game.canPawnMoveFromFieldToFieldUsingCard_andIsHandValid (pawnId, pawnCurrentField, pawnFieldToMoveTo, selectedCards)) {
    			game.getDeck().discardMultipleCards (selectedCards);
    			pawnFieldToMoveTo.receivePawn(pawnCurrentField);
    			game.processPossibleWin(pawnFieldToMoveTo);
        		GameStateDTO gameStateDTO = new GameStateDTO (game);
        		return Response.status(200).entity(gameStateDTO).build();
    		} else {
    			String message = getErrorMessageForMovePawnRequestSituation (pawnCurrentField, pawnFieldToMoveTo, selectedCards, game.getDeck());
    			DeniedRequestDTO deniedRequestDTO = new DeniedRequestDTO(message);
        		return Response.status(202).entity(deniedRequestDTO).build();
    		}
    	} catch (Exception e) {
    		return Response.status(500).entity("Exception thrown.").build();
    	}
	}
    
    private static String getErrorMessageForMovePawnRequestSituation (Field pawnCurrentField, Field pawnFieldToMoveTo, String[] selectedCards, Deck deck) {
		String message = "Something went wrong.";
		if (pawnFieldToMoveTo != null && pawnCurrentField == null) {
			message = "You can not take multiple steps at once.";
		} else if (pawnFieldToMoveTo.type == Field.Type.mountain) {
			message = "You can not move to a mountain field.";
		} else if (!pawnFieldToMoveTo.doesSelectedCardsContainOnlyOneValidCard(selectedCards)) {
			message = "You can not use that card to move to that field.";		
		}
		return message;
    }
}