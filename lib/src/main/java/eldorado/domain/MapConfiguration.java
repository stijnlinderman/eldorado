/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eldorado.domain;

import java.util.Map;
import java.util.HashMap;

public class MapConfiguration {
	public final Map<String, Field> fields;
	
	public MapConfiguration (int mapConfigurationId) {
		this.fields = createMapFromMapConfiguration(mapConfigurations[mapConfigurationId]);
	}
	
	public MapConfiguration (String[][] mapConfiguration) {
		this.fields = createMapFromMapConfiguration(mapConfiguration);
	}
	
	public static Map<String, Field> createMapFromMapConfiguration (String[][] mapConfiguration) {
		Map<String, Field> fields = new HashMap<String, Field>();
		for (String[] fieldConfiguration : mapConfiguration) {
			String xyzStringKey = fieldConfiguration[0];
			int startPosForPawnId = Integer.parseInt(fieldConfiguration[1]);
			boolean isFinishField = (fieldConfiguration[2] == "yes");
			fields.put(xyzStringKey, new Field(startPosForPawnId, isFinishField));
		}
		return fields;
	}
	
	public boolean isField (int x, int y, int z) {
		return this.fields.containsKey(xyzToStringKey(x, y ,z));
	}
	
	public Field getField (int x, int y, int z) {
		return this.fields.get(xyzToStringKey(x, y, z));
	}
	
	private static String xyzToStringKey (Integer x, Integer y, Integer z) {
		return String.join(MapConfiguration.separator, x.toString(), y.toString(), z.toString());
	}
	
	public static final String separator = ",";

	private static final String[][][] mapConfigurations = {
		{
			{"0,0,0", "0", "no"},
			{"0,1,1", "1", "no"},
			{"0,3,3", "0", "no"},
			{"0,4,4", "0", "no"},
			{"1,0,1", "0", "no"},
			{"1,1,2", "0", "no"},
			{"1,2,3", "0", "no"},
			{"1,3,4", "0", "no"},
			{"2,0,2", "0", "no"},
			{"2,2,4", "0", "no"},
			{"2,3,5", "0", "no"},
			{"3,-1,2", "0", "no"},
			{"3,0,3", "0", "no"},
			{"3,2,5", "0", "yes"}
		},
		{
			{"0,0,0", "0", "no"},
			
			{"0,1,1", "0", "no"},
			{"0,2,2", "0", "no"},
			{"0,3,3", "1", "no"},
			
			{"1,0,1", "0", "no"},
			{"2,0,2", "0", "no"},
			{"3,0,3", "0", "no"},
			
			{"1,-1,0", "0", "no"}/*,
			{"2,-2,0", "0", "no"},
			{"3,-3,0", "0", "no"},
			{"0,-1,-1", "0", "no"},
			{"0,-2,-2", "0", "no"},
			{"0,-3,-3", "0", "no"},
			{"-1,0,-1", "0", "no"},
			{"-2,0,-2", "0", "no"},
			{"-3,0,-3", "0", "no"},
			{"-1,1,0", "0", "no"},
			{"-2,2,0", "0", "no"},
			{"-3,3,0", "0", "yes"}*/
		}		
	};
	
	private static final int[][] neighborCoordinatesOffsets = {
			{0, 1, 1},
			{1, 0, 1},
			{1, -1, 0},
			{0, -1, -1},
			{-1, 0, -1},
			{-1, 1, 0}
	};
	
	public int[][] getNeighborCoordinatesOffsets () {
		return neighborCoordinatesOffsets;
	}
	
	public Field findNeighboringFieldThatCurrentlyContainsPawn (int x, int y, int z, int pawnId) {
		for (int i=0; i<neighborCoordinatesOffsets.length; i++) {
			int[] coordinatesOffset = neighborCoordinatesOffsets[i];
			int neighborX = x + coordinatesOffset[0];
			int neighborY = y + coordinatesOffset[1];
			int neighborZ = z + coordinatesOffset[2];
			Field neighborField = this.getField(neighborX, neighborY, neighborZ);
			if (neighborField != null && neighborField.getPawnId() == pawnId) {
				return neighborField;
			};
		};
		return null;
	};
}